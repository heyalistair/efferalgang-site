{"version":3,"sources":["services/api.js","videoPlayer.js","efferalGangVideo.js","efferalGangRadio.js","efferalGangLiveList.js","hooks/useScript.js","App.js","serviceWorker.js","index.js","img/logo.jpg"],"names":["API_URL","fetch","this","then","res","json","videoId","method","VideoPlayer","player","videojs","videoNode","props","console","log","dispose","data-vjs-player","ref","node","className","skin","React","Component","defaultProps","EfferalGangVideo","videoJsOptions","preload","autoplay","controls","fluid","sources","src","type","override","css","Status","AwesomeComponent","state","loading","size","color","EfferalGangRadioView","data","status","t","archive_player","current","id","playhead","width","height","pip","url","playing","loop","error","renderResult","renderError","renderLoading","EfferalGangRadio","getVideo","interval","setInterval","Api","getPlayerInfo","JSON","stringify","setState","incomingStatus","currentStatus","live_player","catch","LiveListView","isVideoFound","isNewShowAdded","event","target","value","trackNewVideoId","encodeURIComponent","hasOwnProperty","new","handleChange","bind","track","upcoming","shows","map","item","key","thumbnail","title","moment","scheduled_at","fromNow","format","logo","onChange","disabled","placeholder","onClick","LiveList","useScript","useEffect","script","document","createElement","async","body","appendChild","removeChild","ArenaEmbedChat","data-publisher","data-chatroom","data-position","App","path","frameborder","scrolling","allow","allowfullscreen","webkitallowfullscreen","mozallowfullscreen","oallowfullscreen","msallowfullscreen","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.cc846087.chunk.js","sourcesContent":["class Api {\n\n    API_URL = \"https://alistairj.com\";\n    // API_URL = \"http://localhost:8080\";\n\n    getPlayerInfo() {\n\n        return fetch(this.API_URL + \"/live\")\n            .then(res => res.json());\n\n    }\n\n    trackNewVideoId(videoId) {\n\n        return fetch(this.API_URL + \"/track?video_id=\" + videoId, {\n                method: 'POST'\n            })\n            .then(res => res.json());\n\n    }\n\n}\n\nexport default new Api();\n","import React from 'react';\nimport videojs from 'video.js';\nimport 'video.js/dist/video-js.css';\nimport './videoPlayer.css'\n\nclass VideoPlayer extends React.Component {\n\n  componentDidMount() {\n    // instantiate Video.js\n    this.player = videojs(this.videoNode, this.props, function onPlayerReady() {\n      console.log('onPlayerReady', this)\n    });\n  }\n\n  // destroy player on unmount\n  componentWillUnmount() {\n    if (this.player) {\n      this.player.dispose()\n    }\n  }\n\n  // wrap the player in a div with a `data-vjs-player` attribute\n  // so videojs won't create additional wrapper in the DOM\n  // see https://github.com/videojs/video.js/pull/3856\n  render() {\n    return (\n      <div>\n        <div data-vjs-player>\n          <video\n            ref={ node => this.videoNode = node }\n            className={`video-js ${this.props.skin}`}>\n          </video>\n        </div>\n      </div>\n    )\n  }\n}\n\nVideoPlayer.defaultProps = {\n    skin: 'vjs-default-skin'\n  }\n\nexport default VideoPlayer;\n","import React, {Component} from 'react'\nimport VideoPlayer from './videoPlayer'\n\nclass EfferalGangVideo extends Component {\n\n    render() {\n\n        const videoJsOptions = {\n            preload: 'auto',\n            autoplay: true,\n            controls: true,\n            fluid: true,\n            sources: [{\n                src:\"http://167.172.160.213/hls/stream.m3u8\",\n                type:\"application/x-mpegURL\"\n            }]\n        }\n\n        return <VideoPlayer { ...videoJsOptions } />\n    }\n}\n\nexport default EfferalGangVideo;","import React from \"react\";\nimport {css} from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Api from \"./services/api\";\nimport ReactPlayer from \"react-player\";\nimport './efferalGangRadio.css';\nimport EfferalGangVideo from \"./efferalGangVideo\";\n\n\nconst override = css`\n  border-color: red;\n  alignItems: 'center';\n  justifyContent: 'center';\n`;\n\nconst Status = {\n    Archive: \"ARCHIVE\",\n    Upcoming: \"UPCOMING\",\n    Live: \"LIVE\"\n}\n\nconst waitingMusic = \"9v9-Nw4nAZg\";\n\nclass AwesomeComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"sweet-loading\">\n                <ClipLoader\n                    css={override}\n                    size={150}\n                    color={\"#123abc\"}\n                    loading={this.state.loading}\n                />\n            </div>\n        );\n    }\n}\n\nclass EfferalGangRadioView extends React.Component {\n\n    renderLoading() {\n        return (<AwesomeComponent/>);\n    }\n\n    renderError() {\n        return (<div className=\"alert alert-warning\"><strong>Error!</strong> {\":'(\"/*this.props.error.message*/}</div>);\n    }\n\n    renderResult() {\n\n        const { data } = this.props;\n        const { status } = data;\n\n        let videoId = \"\";\n        let t = 0;\n\n        if (status === Status.Archive) {\n            videoId = data.archive_player.current.id;\n            t = data.archive_player.current.playhead;\n            return (\n                <div className='EfferalGangRadio'>\n                    <ReactPlayer\n                        width='100%'\n                        height='100%'\n                        pip={false}\n                        controls={true}\n                        url={`https://www.youtube.com/watch?v=${videoId}&t=${t}`} playing/>\n                </div>\n            );\n        }\n\n        if (status === Status.Upcoming) {\n            return (\n                <div className='EfferalGangRadio'>\n                    <ReactPlayer\n                        width='100%'\n                        height='100%'\n                        pip={false}\n                        controls={false}\n                        loop={true}\n                        url={`https://www.youtube.com/watch?v=${waitingMusic}`} playing/>\n                </div>\n            );\n        } else if (status === Status.Live) {\n\n            return (\n                <div className='EfferalGangRadio'>\n                    <EfferalGangVideo/>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        const {data, error} = this.props;\n\n        if (data) {\n            return this.renderResult();\n        } else if (error) {\n            return this.renderError();\n        } else {\n            return this.renderLoading();\n        }\n    }\n}\n\nclass EfferalGangRadio extends React.Component {\n    state = {\n        data: null,\n        error: null,\n        loading: true\n    };\n\n    render() {\n        return (\n            <EfferalGangRadioView {...this.state} />\n        );\n    }\n\n    componentDidMount() {\n        this.getVideo();\n        this.interval = setInterval(() => this.getVideo(), 20000);\n\n    }\n\n    getVideo() {\n        Api.getPlayerInfo()\n            .then((data) => {\n\n                console.log(\"STATUS: \" + JSON.stringify(data.status));\n\n                if (!this.state.data) {\n                    // there is no state, so set the state to start playing a video\n                    this.setState({data: {...data}})\n                }\n\n                const incomingStatus = data.status;\n                const currentStatus = this.state.data.status;\n\n                if (incomingStatus !== currentStatus) {\n                    // we've just switched from archive to live\n                    this.setState({data: {...data}});\n                } else if (incomingStatus === Status.Live && currentStatus === Status.Live) {\n                    // if one live is being handed off to another\n                    if (data.live_player.current.id !== this.state.data.live_player.current.id) {\n                        this.setState({data: {...data}});\n                    }\n                } else if (incomingStatus === Status.Archive && currentStatus === Status.Archive) {\n                    // if one archive is being handed off to another\n                    if (data.archive_player.current.id !== this.state.data.archive_player.current.id) {\n                        this.setState({data: {...data}});\n                    }\n                }\n\n            })\n            .catch((error) => {\n                this.setState({error: true});\n                console.log(\"error: \" + JSON.stringify(error));\n            });\n    }\n}\n\n\nexport default EfferalGangRadio;\n","import React from \"react\";\nimport Api from \"./services/api\";\nimport './efferalGangLiveList.css';\nimport logo from './img/logo.jpg';\nimport moment from 'moment';\n\nclass LiveListView extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            videoId: '',\n            loading: false,\n            isVideoFound: false,\n            isNewShowAdded: false,\n            error: false\n        };\n    }\n\n    handleChange(event) {\n        this.setState({videoId: event.target.value});\n    }\n\n    track() {\n        const videoId = this.props.data;\n\n        if (videoId !== \"\") {\n            this.setState({videoId: '', loading: true});\n\n            Api.trackNewVideoId(encodeURIComponent(this.state.videoId))\n                .then(data => {\n                    console.log(JSON.stringify(data));\n                    if (data.hasOwnProperty('video')) {\n                        console.log(\"data.new = \" + data.new);\n                        this.setState({loading: false, isNewShowAdded: data.new, error: false, isVideoFound: true});\n                    } else {\n                        this.setState({loading: false, error: true, isVideoFound: false});\n                    }\n                }\n            );\n        }\n    }\n\n    renderLoading() {\n        return (<div className='EfferalGangRadio'>\n            loading\n        </div>);\n    }\n\n    renderError() {\n        return (<div className=\"alert alert-warning\"><strong>Error!</strong> {\":'(\"/*this.props.error.message*/}</div>);\n    }\n\n    renderResult() {\n\n        const { data } = this.props;\n        const { status } = data;\n        const handleChange = this.handleChange.bind(this);\n        const track = this.track.bind(this);\n\n        const { upcoming, current } = data.live_player;\n\n        let shows = upcoming.map((item, key) =>\n            <li key={item.id}> <span> <img src={item.thumbnail.url} className=\"thumbnail\"/> </span>{item.title} (coming {moment(item.scheduled_at).fromNow()} at {moment(item.scheduled_at).format('LLLL')})</li>\n        );\n\n        let videoId = \"\";\n        let t = 0;\n\n        console.log('isNewShowAdded: ' + this.isNewShowAdded);\n\n        return (\n            <div className='livelist-wrapper'>\n\n                <div>\n                    <img className='logo' src={logo}/>\n                </div>\n                <div className='livelist'>\n\n                    <h1>\n                        Current show\n                    </h1>\n\n                    {!!current ?\n                        <p key={current.id}> <span> <img src={current.thumbnail.url} className=\"thumbnail\"/> </span>{current.title}</p>\n                        :\n                        <p> No lives! </p>}\n\n                    <h1>\n                        Upcoming shows\n                    </h1>\n\n                    <ul>\n                        {shows}\n                    </ul>\n\n                    <h2>\n                        Manually add an upcoming or live show\n                    </h2>\n\n                    <p>\n                        Something missing? I check for new shows listed on the efferalgang channel every hour at :59. If your show is missing\n                        and you can't wait that long, paste in the id of your show so that I can track it.\n                    </p>\n\n                    <input\n                        type='text'\n                        className='text-input'\n                        value={this.state.videoId}\n                        onChange={handleChange}\n                        disabled={this.state.loading}\n                        placeholder='Paste the URL, e.g. \"https://studio.youtube.com/video/IjnIFdbHzvw/livestreaming\"'\n                    />\n\n                    <button className='track-button' onClick={track}> Add show </button>\n\n                    { this.state.error ?\n                        <div>\n                            <img className={'gif-response'} src='https://media.giphy.com/media/14aUO0Mf7dWDXW/giphy.gif'/>\n                            <p className='error-message'> This is embarrassing but I don't understand what you have pasted into the text field. It can literally be any URL to your show or even the show ID itself. Are you sure this show exists and it's part of the Efferalgang channel?</p>\n                        </div>\n                        : null }\n\n\n                    { this.state.isVideoFound && !this.state.isNewShowAdded ?\n                        <div>\n                            <img className={'gif-response'} src='https://media.giphy.com/media/3o6ZtfraiyfUkNDwru/giphy.gif'/>\n                            <p className='warning-message'> I already knew about this show... so maybe there is not problem here? </p>\n                        </div>\n                        : null\n                    }\n\n                    { this.state.isVideoFound && this.state.isNewShowAdded ?\n                        <div>\n                            <img className={'gif-response'} src='https://media.giphy.com/media/YVpIaYgJ3lpMk/giphy.gif'/>\n                            <p className='success-message'> YOU DID IT. </p>\n                        </div>\n                        : null\n                    }\n                </div>\n            </div>\n            );\n\n    }\n\n\n    render() {\n        const {data, error} = this.props;\n\n        if (data) {\n            return this.renderResult();\n        } else if (error) {\n            return this.renderError();\n        } else {\n            return this.renderLoading();\n        }\n    }\n}\n\nclass LiveList extends React.Component {\n    state = {\n        data: null,\n        error: null,\n        loading: true\n    };\n\n    render() {\n        return (\n            <LiveListView {...this.state} />\n        );\n    }\n\n    componentDidMount() {\n        this.getVideo();\n        this.interval = setInterval(() => this.getVideo(), 20000);\n    }\n\n    getVideo() {\n        Api.getPlayerInfo()\n            .then((data) => {\n                console.log(\"STATUS: \" + JSON.stringify(data.status));\n                this.setState({data: {...data}})\n            })\n            .catch((error) => {\n                this.setState({error: true});\n                console.log(\"error: \" + JSON.stringify(error));\n            });\n    }\n}\n\n\nexport default LiveList;\n","import { useEffect } from 'react';\n\nconst useScript = url => {\n    useEffect(() => {\n        const script = document.createElement('script');\n\n        script.src = url;\n        script.async = true;\n\n        document.body.appendChild(script);\n\n        return () => {\n            document.body.removeChild(script);\n        }\n    }, [url]);\n};\n\nexport default useScript;","import React from 'react';\nimport './App.css';\nimport EfferalGangRadio from \"./efferalGangRadio\";\nimport EfferalGangVideo from \"./efferalGangVideo\";\nimport LiveList from \"./efferalGangLiveList\";\nimport useScript from './hooks/useScript';\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\n\nconst ArenaEmbedChat = props => {\n    useScript('https://go.arena.im/public/js/arenachatlib.js?p=efferalgang-radio&e=efferalgang-radio-global');\n    // rest of your component\n\n    return (<div className=\"arena-chat\"\n        data-publisher=\"efferalgang-radio\"\n        data-chatroom=\"efferalgang-radio-global\"\n        data-position=\"in-page\" />);\n};\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/live\">\n                    <LiveList />\n                </Route>\n                <Route path=\"/castr\">\n                    <iframe src=\"https://player.castr.com/live_4fe7f180890311eb99623595db260c33\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allow=\"autoplay\" allowfullscreen webkitallowfullscreen mozallowfullscreen oallowfullscreen msallowfullscreen></iframe>\n                </Route>\n                <Route path=\"/video\">\n                    <EfferalGangVideo />\n                </Route>\n                <Route path=\"/chat\">\n                    <ArenaEmbedChat />\n                </Route>\n                <Route path=\"/ichat\">\n                    <iframe\n                        title=\"super-cool-efferalgang-iframe-chat\"\n                        src='https://go.arena.im/embed/chat/efferalgang-radio/efferalgang-radio-global'\n                        style={{\n                            'border': 0,\n                            'width': '1px',\n                            'min-width': '100%'\n                        }} />\n                </Route>\n                <Route path=\"/dchat\">\n                    <iframe\n                        src=\"https://titanembeds.com/embed/689546540271927301\"\n                        height=\"800\"\n                        width=\"400\"\n                        frameborder=\"0\" />\n                </Route>\n                <Route path=\"/\">\n                    <EfferalGangRadio />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.4094076c.jpg\";"],"sourceRoot":""}