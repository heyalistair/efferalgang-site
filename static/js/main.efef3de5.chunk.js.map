{"version":3,"sources":["services/api.js","efferalGangRadio.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","fetch","this","then","res","json","override","css","Status","AwesomeComponent","props","state","loading","className","size","color","React","Component","EfferalGangRadioView","data","status","videoId","t","archive_player","current","id","playhead","width","height","pip","controls","url","playing","loop","live_player","error","renderResult","renderError","renderLoading","EfferalGangRadio","getVideo","interval","setInterval","Api","getCurrentShowId","console","log","JSON","stringify","setState","incomingStatus","currentStatus","catch","App","path","data-publisher","data-chatroom","data-position","async","src","title","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.efef3de5.chunk.js","sourcesContent":["class Api {\n\n    API_URL = \"https://alistairj.com\";\n    //API_URL = \"http://localhost:8080\";\n\n    getCurrentShowId() {\n\n        return fetch(this.API_URL + \"/live\")\n            .then(res => res.json());\n\n    }\n\n}\n\nexport default new Api();\n","import React from \"react\";\nimport {css} from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport Api from \"./services/api\";\nimport ReactPlayer from \"react-player\";\nimport './efferalGangRadio.css';\n\n\nconst override = css`\n  border-color: red;\n  alignItems: 'center';\n  justifyContent: 'center';\n`;\n\nconst Status = {\n    Archive: \"ARCHIVE\",\n    Upcoming: \"UPCOMING\",\n    Live: \"LIVE\"\n}\n\nconst waitingMusic = \"9v9-Nw4nAZg\";\n\nclass AwesomeComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"sweet-loading\">\n                <ClipLoader\n                    css={override}\n                    size={150}\n                    color={\"#123abc\"}\n                    loading={this.state.loading}\n                />\n            </div>\n        );\n    }\n}\n\nclass EfferalGangRadioView extends React.Component {\n\n    renderLoading() {\n        return (<AwesomeComponent/>);\n    }\n\n    renderError() {\n        return (<div className=\"alert alert-warning\"><strong>Error!</strong> {\":'(\"/*this.props.error.message*/}</div>);\n    }\n\n    renderResult() {\n\n        const { data } = this.props;\n        const { status } = data;\n\n        let videoId = \"\";\n        let t = 0;\n\n        if (status === Status.Archive) {\n            videoId = data.archive_player.current.id;\n            t = data.archive_player.current.playhead;\n            return (\n                <div className='EfferalGangRadio'>\n                    <ReactPlayer\n                        width='100%'\n                        height='100%'\n                        pip={false}\n                        controls={true}\n                        url={`https://www.youtube.com/watch?v=${videoId}&t=${t}`} playing/>\n                </div>\n            );\n        }\n\n        if (status === Status.Upcoming) {\n            return (\n                <div className='EfferalGangRadio'>\n                    <ReactPlayer\n                        width='100%'\n                        height='100%'\n                        pip={false}\n                        controls={false}\n                        loop={true}\n                        url={`https://www.youtube.com/watch?v=${waitingMusic}`} playing/>\n                </div>\n            );\n        } else if (status === Status.Live) {\n            videoId = data.live_player.current.id;\n        }\n\n        return (\n            <div className='EfferalGangRadio'>\n                <ReactPlayer\n                    width='100%'\n                    height='100%'\n                    pip={false}\n                    controls={true}\n                    url={`https://www.youtube.com/watch?v=${videoId}`} playing/>\n            </div>\n        );\n\n    }\n\n    render() {\n        const {data, error} = this.props;\n\n        if (data) {\n            return this.renderResult();\n        } else if (error) {\n            return this.renderError();\n        } else {\n            return this.renderLoading();\n        }\n    }\n}\n\nclass EfferalGangRadio extends React.Component {\n    state = {\n        data: null,\n        error: null,\n        loading: true\n    };\n\n    render() {\n        return (\n            <EfferalGangRadioView {...this.state} />\n        );\n    }\n\n    componentDidMount() {\n        this.getVideo();\n        this.interval = setInterval(() => this.getVideo(), 20000);\n\n    }\n\n    getVideo() {\n        Api.getCurrentShowId()\n            .then((data) => {\n\n                console.log(\"STATUS: \" + JSON.stringify(data.status));\n\n                if (!this.state.data) {\n                    // there is no state, so set the state to start playing a video\n                    this.setState({data: {...data}})\n                }\n\n                const incomingStatus = data.status;\n                const currentStatus = this.state.data.status;\n\n                if (incomingStatus !== currentStatus) {\n                    // we've just switched from archive to live\n                    this.setState({data: {...data}});\n                } else if (incomingStatus === Status.Live && currentStatus === Status.Live) {\n                    // if one live is being handed off to another\n                    if (data.live_player.current.id !== this.state.data.live_player.current.id) {\n                        this.setState({data: {...data}});\n                    }\n                } else if (incomingStatus === Status.Archive && currentStatus === Status.Archive) {\n                    // if one archive is being handed off to another\n                    if (data.archive_player.current.id !== this.state.data.archive_player.current.id) {\n                        this.setState({data: {...data}});\n                    }\n                }\n\n            })\n            .catch((error) => {\n                this.setState({error: true});\n                console.log(\"error: \" + JSON.stringify(error));\n            });\n    }\n}\n\n\nexport default EfferalGangRadio;\n","import React from 'react';\nimport './App.css';\nimport EfferalGangRadio from \"./efferalGangRadio\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <Router>\n            <Switch>\n                <Route path=\"/chat\">\n                    <div className=\"arena-chat\"\n                         data-publisher=\"efferalgang-radio\"\n                         data-chatroom=\"efferalgang-radio-global\"\n                         data-position=\"in-page\"/>\n                    <script async\n                            src=\"https://go.arena.im/public/js/arenachatlib.js?p=efferalgang-radio&e=efferalgang-radio-global\"/>\n                </Route>\n                <Route path=\"/ichat\">\n                    <iframe title=\"super-cool-efferalgang-iframe-chat\"\n                            src='https://go.arena.im/embed/chat/efferalgang-radio/efferalgang-radio-global'\n                            style={{\n                                'border': 0,\n                                'width': '1px',\n                                'min-width': '100%',\n                                'height': '100%'\n                            }}/>\n                </Route>\n                <Route path=\"/\">\n                    <EfferalGangRadio/>\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}